{
	"info": {
		"_postman_id": "dd906ec5-22f0-47c7-b231-e28d3bae8217",
		"name": "TeamAPITizers",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Patient Controller",
			"item": [
				{
					"name": "POST Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"let response = pm.response.json();",
									"",
									"// Extract the token",
									"let token = response.token;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianToken\", token);",
									"",
									"// Optional: log it for debug",
									"console.log(\"Token saved in collection variable: \" + token);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "847f9991-5239-452d-9723-545b96dab5ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in POST Admin Login is \"+ requestType)",
									"// if (requestType==\"getUserName\"||requestType==\"deleteUserName\"){",
									"//     pm.execution.skipRequest();",
									"// }",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at POST ADMIN LOGIN is  \"+ stopRun)",
									"if (requestType!=\"createAdmin\"){",
									"    pm.execution.skipRequest();",
									"}",
									"",
									"",
									"if (stopRun === \"true\") {",
									"    console.log(\"Stopping run as deleteDietician executed.\");",
									"   pm.setNextRequest(null)",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b17f7060-cfaf-4ced-bc7b-030073d3aacc"
							}
						}
					],
					"id": "271ba776-0ae6-44f2-bd66-a99506f21b23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"Team707@gmail.com\",\n  \"password\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hackdieticianbaseurl}}dietician/login"
					},
					"response": []
				},
				{
					"name": "Create a dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"let response = pm.response.json();",
									"",
									"// Extract the dietician ID",
									"let dieticianId = response.id;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"deiticianID\", dieticianId);",
									"",
									"// Optional: log it for debug",
									"console.log(\"Dietician ID saved in collection variable: \" + dieticianId);",
									"",
									"// Extract the emailID of dietician ",
									"let dieticianEmailId = response.Email;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianEmailId\", dieticianEmailId);",
									"",
									"// Optional: log it for debug",
									"console.log(\"Dietician EMAIL ID saved in collection variable: \" + dieticianEmailId);",
									"",
									"// Extract the emailID password of dietician ",
									"let dieticianPassword = response.loginPassword;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianPassword\", dieticianPassword);",
									"",
									"// Optional: log it for debug",
									"console.log(\"Dietician EMAIL password saved in collection variable: \" + dieticianPassword);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ed90bad6-0ee8-45dd-abdb-9153345a7bfd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in CREATE a dietician is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"",
									"console.log(\"The value of stoprun at CREATE DIETICIAN is  \"+ stopRun)",
									"if (requestType!=\"createDietician\"){",
									"    pm.execution.skipRequest();",
									"}",
									"else{",
									"    console.log(\"Executing createDietician request for: \" + pm.iterationData.get(\"Email\"));",
									"}",
									"if (stopRun === \"true\") {",
									"    console.log(\"Stopping run as deleteDietician executed.\");",
									"      pm.setNextRequest(null)",
									"}",
									"// if(reqType === \"createDietician\") {",
									"//     console.log(\"Executing createDietician request for: \" + pm.iterationData.get(\"Email\"));",
									"// } else {",
									"//     console.log(\"Skipping createDietician request as requestType is: \" + reqType);",
									"//     // Allow other requests to continue; do not skip unless needed",
									"// }",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "df705f13-0d9e-480a-98c1-bb5c513d9493"
							}
						}
					],
					"id": "72ee6799-49cd-4e27-b16b-5884b8077215",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}"
						},
						"url": "{{hackdieticianbaseurl}}dietician/dietician"
					},
					"response": []
				},
				{
					"name": "Dietician Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// No pm.response.json() here because pre-request runs BEFORE request is sent.",
									"// Instead, confirm variables are available:",
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in DIETICIAN login is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at DETICIAN LOGIN   is  \"+ stopRun)",
									"if (requestType!=\"createPatient\"){",
									"    pm.execution.skipRequest();",
									"}",
									"if (stopRun === \"true\") {",
									"    console.log(\"Stopping run as deleteDietician executed.\");",
									"    pm.setNextRequest(null)",
									"   ",
									"}",
									"console.log(\"Dietician Email ID for login: \" + pm.collectionVariables.get(\"dieticianEmailId\"));",
									"console.log(\"Dietician Password for login: \" + pm.collectionVariables.get(\"dieticianPassword\"));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dc9b5260-670e-43c0-95f6-6ba9469659d1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"let response = pm.response.json();",
									"",
									"// Extract the token",
									"let patientToken = response.token;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"patientToken\", patientToken);",
									"",
									"// Log it for debug",
									"console.log(\"Patient token saved in collection variable: \" + patientToken);",
									"",
									"// if(patientToken) {",
									"//     console.log(\"Dietician login successful. Proceeding to delete dietician.\");",
									"//     postman.setNextRequest(\"Delete diatecian\");",
									"// } else {",
									"//     console.log(\"Dietician login failed. Not proceeding to delete dietician.\");",
									"//     postman.setNextRequest(null);",
									"// }",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "50b1a882-308f-4c73-ad37-b1d53d36e34c"
							}
						}
					],
					"id": "01204f54-85c6-4d16-8ec8-3c6b426c52ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmailId}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hackdieticianbaseurl}}dietician/login"
					},
					"response": []
				},
				{
					"name": "Create Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in CREATE PATIENT  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at CREATE PATIENT  is  \"+ stopRun)",
									"if (stopRun === \"true\") {",
									"    console.log(\"Stopping run as deleteDietician executed.\");",
									"    postman.setNextRequest(null);",
									"   // pm.setNextRequest(null)",
									"}",
									"if (requestType !== \"createPatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not createPatient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"} else {",
									"    // Build patientInfo JSON dynamically",
									"    let patientInfo = {",
									"        \"FirstName\": pm.iterationData.get(\"Firstname\"),",
									"        \"LastName\": pm.iterationData.get(\"Lastname\"),",
									"        \"ContactNumber\": pm.iterationData.get(\"ContactNumber\"),",
									"        \"Email\": pm.iterationData.get(\"Email\"),",
									"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
									"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
									"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
									"        \"DateOfBirth\": pm.iterationData.get(\"DateOfBirth\")",
									"    };",
									"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
									"    let vitals = {",
									"        \"Weight\": pm.iterationData.get(\"Weight\"),",
									"        \"Height\": pm.iterationData.get(\"Height\"),",
									"        \"Temperature\": pm.iterationData.get(\"Temperature\"),",
									"        \"SP\": pm.iterationData.get(\"SP\"),",
									"        \"DP\": pm.iterationData.get(\"DP\")",
									"    };",
									"    pm.collectionVariables.set(\"vitals\", JSON.stringify(vitals));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "271ce865-06cc-4e53-8e07-d079ec3c9fe9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"let response = pm.response.json();",
									"",
									"// Extract the dietician ID",
									"let patientId = response.patientId;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									"",
									"// Optional: log it for debug",
									"console.log(\"patientId ID saved in collection variable: \" + patientId);",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									" ",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"//store patient_id in collection variable for future use.",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"patient_id\", jsonData.patientId);",
									"//check if response contains userId and userFirstName, userLastName etc.",
									"pm.test(\"patientId and other variables are present in response\", function () {",
									"    try {",
									"        //var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property(\"patientId\");",
									"        pm.expect(jsonData).to.have.property(\"FirstName\");",
									"        pm.expect(jsonData).to.have.property(\"LastName\");",
									"        pm.expect(jsonData).to.have.property(\"ContactNumber\");",
									"        pm.expect(jsonData).to.have.property(\"Email\");",
									"        pm.expect(jsonData).to.have.property(\"Allergy\");",
									"        pm.expect(jsonData).to.have.property(\"FoodPreference\");",
									"        pm.expect(jsonData).to.have.property(\"CuisineCategory\");",
									"        pm.expect(jsonData).to.have.property(\"DateOfBirth\");",
									"        pm.expect(jsonData).to.have.property(\"DieticianId\");",
									"    } catch (e) {",
									"        pm.expect.fail(\"Response after creatting patient is not valid in JSON\");",
									"    }",
									"});",
									"",
									"",
									"",
									"//pm.setNextRequest(\"Delete Patient\");",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "09d5d116-855c-458d-9907-791b0309ffa7"
							}
						}
					],
					"id": "2a71da0c-1160-4694-873d-6cef2a0d1223",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/maya/Downloads/Sample reports/Hypo Thyroid-Report.pdf"
								},
								{
									"key": "file",
									"value": "{{PatientFilePathHyperThroid}},{{PatientFilePathDiabetic}},{{PatientFilePathCBC}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								},
								{
									"key": "vitals",
									"value": "{{vitals}}",
									"type": "text"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient"
					},
					"response": []
				},
				{
					"name": "Get PatientId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
									"if (requestType!=\"getPatientID\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3b13003a-382a-4160-9aa9-b46552126880"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Status code is 200",
									"pm.test(\"Test 1 : Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2. Response is an object",
									"pm.test(\"Response is an object\", () => {",
									"    let data = pm.response.json();",
									"    pm.expect(typeof data).to.equal(\"object\");",
									"});",
									"// 3. Response is an object is not empty",
									"pm.test(\"Test 3: Response object is not empty\", () => {",
									"    let data = pm.response.json();",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"// 4. Patient expected fields are present in the response object.",
									"pm.test(\"Test 4: Patient object has expected fields\", () => {",
									"    let data = pm.response.json();",
									"    pm.expect(data).to.have.all.keys(",
									"        \"patientId\",",
									"        \"FirstName\",",
									"        \"LastName\",",
									"        \"ContactNumber\",",
									"        \"Email\",",
									"        \"Allergy\",",
									"        \"FoodPreference\",",
									"        \"CuisineCategory\",",
									"        \"FileMorbidity\",",
									"        \"FileMorbidityCondition\",",
									"        \"DateOfBirth\",",
									"        \"DieticianId\",",
									"        \"Vitals\",",
									"        \"LastVisitDate\"",
									"    );",
									"});",
									"",
									"// 5. Content-Type header is application/json",
									"pm.test(\"Test 5: Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 6. Status text is OK",
									"pm.test(\"Test 6: Status text is OK\", () => {",
									"    pm.expect(pm.response.status).to.eql(\"OK\");",
									"});",
									"// 7. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
									"pm.test(\"Test 7: Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals\", () => {",
									"    let data = pm.response.json();",
									"",
									"    // Check FileMorbidity",
									"    pm.expect(data.FileMorbidity).to.be.an(\"object\");",
									"    let fileIdsMorbidity = Object.keys(data.FileMorbidity);",
									"    pm.expect(fileIdsMorbidity.length).to.be.above(0);",
									"    console.log(\"FileMorbidity fileIds:\", fileIdsMorbidity);",
									"",
									"    // Check FileMorbidityCondition",
									"    pm.expect(data.FileMorbidityCondition).to.be.an(\"object\");",
									"    let fileIdsCondition = Object.keys(data.FileMorbidityCondition);",
									"    pm.expect(fileIdsCondition.length).to.be.above(0);",
									"    console.log(\"FileMorbidityCondition fileIds:\", fileIdsCondition);",
									"",
									"    // Check Vitals",
									"    pm.expect(data.Vitals).to.be.an(\"object\");",
									"    let fileIdsVitals = Object.keys(data.Vitals);",
									"    pm.expect(fileIdsVitals.length).to.be.above(0);",
									"    console.log(\"Vitals fileIds:\", fileIdsVitals);",
									"",
									"    // Optional: Validate the same fileId exists across all three (if business logic requires)",
									"    let commonFileIds = fileIdsMorbidity.filter(id => fileIdsCondition.includes(id) && fileIdsVitals.includes(id));",
									"    pm.expect(commonFileIds.length).to.be.above(0);",
									"    console.log(\"Common fileIds across all three:\", commonFileIds);",
									"});",
									"",
									"// 8. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
									"pm.test(\"Test 8: Field types are correct\", () => {",
									"    let data = pm.response.json();",
									"",
									"    pm.expect(data.patientId).to.be.a(\"number\");",
									"    pm.expect(data.FirstName).to.be.a(\"string\");",
									"    pm.expect(data.LastName).to.be.a(\"string\");",
									"    pm.expect(data.ContactNumber).to.be.a(\"string\");",
									"    pm.expect(data.Email).to.be.a(\"string\");",
									"    pm.expect(data.Allergy).to.be.a(\"string\");",
									"    pm.expect(data.FoodPreference).to.be.a(\"string\");",
									"    pm.expect(data.CuisineCategory).to.be.a(\"string\");",
									"    pm.expect(data.DateOfBirth).to.be.a(\"string\");",
									"    pm.expect(data.DieticianId).to.be.a(\"number\");",
									"});",
									"",
									"//9 email format validation",
									"pm.test(\"Test 9:  Email format is valid\", () => {",
									"    let data = pm.response.json();",
									"    pm.expect(data.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"//10 Contact number is valid 10 digits",
									"pm.test(\"Test 10: Contact number is valid 10 digits\", () => {",
									"    let data = pm.response.json();",
									"    pm.expect(data.ContactNumber).to.match(/^\\d{10}$/);",
									"});",
									"",
									"//11 Date of Birth is a valid date",
									"pm.test(\"Test 11: Date of Birth is a valid date\", () => {",
									"    let data = pm.response.json();",
									"    let dob = Date.parse(data.DateOfBirth);",
									"    pm.expect(isNaN(dob)).to.be.false;",
									"});",
									"//12 Allergy, FoodPreference, CuisineCategory are valid values",
									"pm.test(\"Test 12: Allergy, FoodPreference, CuisineCategory are valid values\", () => {",
									"    let data = pm.response.json();",
									"",
									"    const allowedAllergies = [\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"];",
									"    const allowedPreferences = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggitarian\", \"NonVeg\"];",
									"    const allowedCuisine = [\"Indian\", \"South Indian\", \"Rajasthani\", \"Punjabi\", /*... add rest */];",
									"",
									"    pm.expect(allowedAllergies).to.include(data.Allergy);",
									"    pm.expect(allowedPreferences).to.include(data.FoodPreference);",
									"    pm.expect(allowedCuisine).to.include(data.CuisineCategory);",
									"});",
									"",
									"//13 Vitals fields are correct types\"",
									"pm.test(\"Test 13: Vitals fields are correct types\", () => {",
									"    let data = pm.response.json();",
									"    let vitals = data.Vitals;",
									"    let fileIds = Object.keys(vitals);",
									"",
									"    fileIds.forEach(id => {",
									"        let v = vitals[id];",
									"        pm.expect(v.Weight).to.be.a(\"number\");",
									"        pm.expect(v.Height).to.be.a(\"number\");",
									"        pm.expect(v.Temperature).to.be.a(\"number\");",
									"        pm.expect(v.SP).to.be.a(\"number\");",
									"        pm.expect(v.DP).to.be.a(\"number\");",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "60df8417-d08e-4f23-9941-fa3c96572051"
							}
						}
					],
					"id": "bb2ef49b-7e57-4934-bc76-a3daeee42d07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Get PatientIdinvalidAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Status code is 403",
									"pm.test(\"Test 1 : Status code is 403 since it uses the wrong token\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4bba119d-a3f0-49cf-858a-ebc85ee5d859"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
									"if (requestType!=\"getPatientID\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "126053ae-9c57-4da9-b02f-ba16c17f6984"
							}
						}
					],
					"id": "709e5a90-f7a6-48c4-a2e2-1b05c56b0ab1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Get InvalidPatientID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
									"if (requestType!=\"getPatientID\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "beaeb99c-572e-43db-a4d2-d9829377e3b2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Status code is 404",
									"pm.test(\"Test 1 : Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "53218969-20c6-45cd-be61-fef0c603df7e"
							}
						}
					],
					"id": "c15e228a-6072-4f3a-bccb-7ea936d91ceb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/10000000"
					},
					"response": []
				},
				{
					"name": "Get PatientIdInvalidAuthType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Status code is 401",
									"pm.test(\"Test 1 : Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7c782f16-6243-4c11-8dad-b5e7a12599a1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
									"if (requestType!=\"getPatientID\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4d3a5f59-98d0-4aad-abbe-a92f1393bec9"
							}
						}
					],
					"id": "1454c60b-ece3-480a-922e-649e0bf0ca0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Get PatientIDAplhanum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Status code is 400",
									"pm.test(\"Test 1 : Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "126c40d6-e284-47bf-be6d-36599d8e208c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
									"if (requestType!=\"getPatientID\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cb74b703-f5dd-4da9-b5e9-9ec5ff4deb42"
							}
						}
					],
					"id": "94f885f8-4de2-4af6-a576-1de6e2deb062",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/A"
					},
					"response": []
				},
				{
					"name": "Update Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in Update Patient    is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at Update Patient   is  \"+ stopRun)",
									"if (requestType!=\"updatePatientID\"){",
									"    pm.execution.skipRequest();",
									"}",
									"else {",
									"    // Build patientInfo JSON dynamically",
									"    let patientInfo = {",
									"        \"FirstName\": pm.iterationData.get(\"Firstname\"),",
									"        \"LastName\": pm.iterationData.get(\"Lastname\"),",
									"        \"ContactNumber\": pm.iterationData.get(\"ContactNumber\"),",
									"        \"Email\": pm.iterationData.get(\"Email\"),",
									"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
									"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
									"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
									"        \"DateOfBirth\": pm.iterationData.get(\"DateOfBirth\")",
									"    };",
									"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
									"    let vitals = {",
									"        \"Weight\": pm.iterationData.get(\"Weight\"),",
									"        \"Height\": pm.iterationData.get(\"Height\"),",
									"        \"Temperature\": pm.iterationData.get(\"Temperature\"),",
									"        \"SP\": pm.iterationData.get(\"SP\"),",
									"        \"DP\": pm.iterationData.get(\"DP\")",
									"    };",
									"    pm.collectionVariables.set(\"vitals\", JSON.stringify(vitals));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ab099238-5612-4b3e-afd3-84fedc984eb4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status text is OK\", function () {",
									"    pm.expect(pm.response.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let expectedFirstname = pm.iterationData.get(\"Firstname\")",
									"let expectedLastname = pm.iterationData.get(\"Lastname\")",
									"",
									"pm.test(\"FirstName updated correctly\", function () {",
									"    pm.expect(response.FirstName).to.eql(expectedFirstname);",
									"});",
									"",
									"pm.test(\"LastName updated correctly\", function () {",
									"    pm.expect(response.LastName).to.eql(expectedLastname);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3cb14306-a31c-40f6-92ac-901aff972d3a"
							}
						}
					],
					"id": "a0aa89a4-f0fe-4989-ab4d-0133b83a59b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								},
								{
									"key": "vitals",
									"value": "{{vitals}}",
									"type": "text"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Delete Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in DELETE Patient  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at DELETE Patient is  \"+ stopRun)",
									"if (requestType!=\"deletePatient\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "67b7214f-8af2-423a-b80b-767ec794f849"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3ff68aa5-e96d-4d78-9cd7-43101618129e"
							}
						}
					],
					"id": "4ec4accf-a272-452f-bb71-99d878e13bf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Delete diatecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"stopRun\", \"true\");",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6c162b6d-f708-4713-9e0e-62632a0840bf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in DELETE Dietician  is \"+ requestType)",
									"let stopRun = pm.environment.get(\"stopRun\");",
									"console.log(\"The value of stoprun at DELETE dietician is  \"+ stopRun)",
									"if (requestType!=\"deleteDietician\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fc472536-9280-43e0-8096-2205e15b5ddd"
							}
						}
					],
					"id": "3dec1433-1457-483b-b3cc-a39e00b9046d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{hackdieticianbaseurl}}dietician/dietician/{{deiticianID}}"
					},
					"response": []
				}
			],
			"id": "7cd85d3c-0dc7-4b18-868a-a48d744e0c68"
		},
		{
			"name": "Dietician Controller",
			"item": [],
			"id": "d7d4fd72-62c1-4eab-bda5-3b8eee3e15b4"
		},
		{
			"name": "User Login",
			"item": [],
			"id": "e4684441-ba3b-4c99-a48e-1957a055e43e"
		},
		{
			"name": "New Folder",
			"item": [],
			"id": "e3b677fe-7230-4437-911d-ff56708ab437"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "9265f6bc-6db1-4a08-9b5f-02e0611649ce"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "f29e9c06-4b25-4bb1-b4cc-55dca1aa023f"
			}
		}
	],
	"variable": [
		{
			"key": "hackdieticianbaseurl",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/",
			"type": "string"
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "deiticianID",
			"value": ""
		},
		{
			"key": "dieticianEmailId",
			"value": ""
		},
		{
			"key": "dieticianPassword",
			"value": ""
		},
		{
			"key": "PatientFilePathHyperThroid",
			"value": "",
			"type": "string"
		},
		{
			"key": "patientInfo",
			"value": ""
		},
		{
			"key": "patientToken",
			"value": ""
		},
		{
			"key": "patientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "vitals",
			"value": ""
		},
		{
			"key": "PatientFilePathDiabetic",
			"value": "",
			"type": "string"
		},
		{
			"key": "PatientFilePathCBC",
			"value": "",
			"type": "string"
		},
		{
			"key": "patient_id",
			"value": ""
		}
	]
}