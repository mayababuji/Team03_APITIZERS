{
	"info": {
		"_postman_id": "56b6956b-8654-413f-982a-fb4c6b87cdb2",
		"name": "TEAM3APTIZIERSHACAKATHON",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "User login using admin credentials Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9dad3ce9-adcb-4c68-9519-9499c661bbd0",
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							" ",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"admin_token\", jsonData.token);",
							"",
							"    pm.test(\"token is present in response\", function () {",
							"        try {",
							"            pm.expect(jsonData).to.have.property(\"token\");",
							"            pm.expect(jsonData).to.have.property(\"type\");",
							"            pm.expect(jsonData).to.have.property(\"userId\");",
							"            pm.expect(jsonData).to.have.property(\"type\");",
							"            pm.expect(jsonData).to.have.property(\"loginUserEmail\");",
							"            pm.expect(jsonData).to.have.property(\"type\");",
							"        } catch (e) {",
							"            pm.expect.fail(\"Response is not valid in JSON\");",
							"        }",
							"    });",
							"",
							"//check schema validation of response body",
							"    const schema = {",
							"        type: \"object\",",
							"        required: [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"],",
							"        properties: {",
							"            token: { type: \"string\" },",
							"            type: { type: \"string\" },",
							"            userId: { type: \"number\" },",
							"            loginUserEmail: { type: \"string\" , format: \"email\" },",
							"            roles: { type: \"array\", items: { type: \"string\" } }  ",
							"        }",
							"    };",
							"",
							"    pm.test(\"Schema of response body is valid\", function () {",
							"        pm.response.to.have.jsonSchema(schema);",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2fe145d3-3bd7-4c53-823c-40c6cb0448b3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userLoginEmail\": \"Team707@gmail.com\",\n  \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/login"
			},
			"response": []
		},
		{
			"name": "Creates a dietician with given dietician DTO Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							" ",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"//store response data in collection variables for future use.",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"dietician_id\", jsonData.id);",
							"pm.collectionVariables.set(\"login_Password\", jsonData.loginPassword);",
							"pm.collectionVariables.set(\"dietician_email\", jsonData.Email);",
							"",
							"// validating response for auto-generated fields",
							"pm.test(\"Check loginPassword and ID are generated\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.loginPassword).to.not.be.null;",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    // Validate response matches request body data",
							"    pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"dieticianEmail\"));",
							"    pm.expect(jsonData.Firstname).to.eql(pm.iterationData.get(\"dieticianFirstname\"));",
							"    pm.expect(jsonData.Lastname).to.eql(pm.iterationData.get(\"dieticianLastname\"));",
							"    //pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"DateOfBirth\"));",
							"    pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"dieticianDateOfBirth\").substring(0,Â 10));",
							"    pm.expect(jsonData.ContactNumber).to.eql(pm.iterationData.get(\"dieticianContactNumber\").toString());",
							"    pm.expect(jsonData.Education).to.eql(pm.iterationData.get(\"Education\"));",
							"    pm.expect(jsonData.HospitalName).to.eql(pm.iterationData.get(\"HospitalName\"));",
							"    pm.expect(jsonData.HospitalStreet).to.eql(pm.iterationData.get(\"HospitalStreet\"));",
							"    pm.expect(jsonData.HospitalCity).to.eql(pm.iterationData.get(\"HospitalCity\"));",
							"    pm.expect(jsonData.HospitalPincode).to.eql(pm.iterationData.get(\"HospitalPincode\").toString());",
							" });",
							" ",
							"// email format validation",
							"  pm.test(\"Test 9:  Email format is valid\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"// Contact number is valid 10 digits",
							" pm.test(\"Contact number is valid 10 digits\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.ContactNumber).to.match(/^\\d{10}$/);",
							"});",
							"",
							"//Date of Birth is a valid date",
							"pm.test(\"Test Date of Birth is a valid date\", () => {",
							"    let data = pm.response.json();",
							"    let dob = Date.parse(data.DateOfBirth);",
							"    pm.expect(isNaN(dob)).to.be.false;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "dc6600b0-aab5-466b-b10c-247104224834",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{dieticianFirstname}}\",\n  \"Lastname\": \"{{dieticianLastname}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "Creates a dietician with Negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 400 for invalid first and last name\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							" //Parse the response JSON",
							"let jsonData;",
							"try {",
							"    jsonData = pm.response.json();",
							"    console.log(\"Response JSON:\", JSON.stringify(jsonData, null, 2));",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON\");",
							"    pm.expect.fail(\"Invalid JSON response\");",
							"}",
							"",
							"// Determine the type of error and assert accordingly",
							"pm.test(\"Proper error handling based on response\", function () {",
							"    if (jsonData.firstName || jsonData.lastName) {",
							"        // Validation error case",
							"        pm.expect(jsonData.firstName).to.eql(\"FirstName should only contain Alphabets\");",
							"        pm.expect(jsonData.lastName).to.eql(\"LastName should only contain Alphabets\");",
							"    } else if (jsonData.errorCode === \"DUPLICATE_ENTITY\") {",
							"        // Duplicate user case",
							"        pm.expect(jsonData.errorMessage).to.eql(\"Dietician user with given date of birth and contact already exists\");",
							"    } else {",
							"        console.log(\"Unexpected error structure:\", JSON.stringify(jsonData));",
							"        pm.expect.fail(\"Unexpected error response structure\");",
							"    }",
							"});",
							"",
							"pm.test(\"Check error message or error fields\", function () {",
							"    if (pm.response.code === 400 || pm.response.code === 409) {",
							"        pm.expect(jsonData.message || jsonData.error).to.not.be.null;",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c807b044-e5b3-4652-8987-14a4505fed03",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{NDFn}}\",\n  \"Lastname\": \"{{NDLn}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "Creates a dietician Negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"let response = pm.response.json();",
							"",
							"// Safe validation field for error message",
							"pm.test(\"Error field and message validation\", function () {",
							"    let expectedField = data.ExpectedErrorField;",
							"    let expectedMessage = data.ExpectedErrorMessage;",
							"",
							"    if (expectedField && expectedMessage) {",
							"        pm.expect(response).to.have.property(expectedField);",
							"        pm.expect(response[expectedField]).to.eql(expectedMessage);",
							"    } else {",
							"        console.warn(\"ExpectedErrorField or ExpectedErrorMessage not defined in data file.\");",
							"    }",
							"});",
							"",
							"pm.test(\"Validate Firstname and Lastname errors\", function () {",
							"    let jsonData = pm.response.json();",
							"    if (data.Firstname === \"\") {",
							"        pm.expect(pm.response.json()).to.have.property(\"Firstname\");",
							"    }",
							"    if (data.Lastname === \"\") {",
							"        pm.expect(pm.response.json()).to.have.property(\"Lastname\");",
							"    }",
							"    if (data.Firstname && /\\d/.test(data.Firstname)) {",
							"        pm.expect(pm.response.json()[\"Firstname\"]).to.include(\"only contain Alphabets\");",
							"    }",
							"    if (data.Lastname && /\\d/.test(data.Lastname)) {",
							"        pm.expect(pm.response.json()[\"Lastname\"]).to.include(\"only contain Alphabets\");",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "bb1102c3-5d75-44eb-8817-ae1f172713cb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{dieticianFirstname}}\",\n  \"Lastname\": \"{{dieticianLastname}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "Create dietician without first and lastname",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 400 - Bad Request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// // Parse JSON response and log it for debugging purposes.",
							"// let jsonData;",
							"// try {",
							"//     jsonData = pm.response.json();",
							"//     console.log(\"Response JSON:\", JSON.stringify(jsonData, null, 2));",
							"// } catch (e) {",
							"//     console.log(\"Failed to parse JSON\");",
							"//     pm.expect.fail(\"Invalid JSON response\");",
							"// }",
							"",
							"// pm.test(\"Proper error handling based on response\", function () {",
							"//     if (jsonData.firstName || jsonData.lastName) {",
							"//         // Validation error case",
							"//         pm.expect(jsonData.firstName).to.eql(\"Dietician's firstname is required!\");",
							"//         pm.expect(jsonData.lastName).to.eql(\"Dietician's lasttname is required!\");",
							"//     } else if (jsonData.errorCode === \"DUPLICATE_ENTITY\") {",
							"//         // Duplicate user case",
							"//         pm.expect(jsonData.errorMessage).to.eql(\"Dietician user with given date of birth and contact already exists\");",
							"//     } else {",
							"//         console.log(\"Unexpected error structure:\", JSON.stringify(jsonData));",
							"//         pm.expect.fail(\"Unexpected error response structure\");",
							"//     }",
							"// });",
							" // content type validation",
							"  pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"//header validation",
							" pm.test(\"Content-Type header is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9a4f5e26-f97b-4886-85f7-b938cbc0e83d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{BNFn}}\",\n  \"Lastname\": \"{{BNLn}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "Create dietician Invalid endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 404 - Not Found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.test(\"Error message is 'Not Found'\", function () {",
							"    pm.expect(response.error).to.eql(\"Not Found\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "57f0c634-db0a-48d8-8806-0a395c66b486",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{dieticianFirstname}}\",\n  \"Lastname\": \"{{dieticianLastname}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dieticians"
			},
			"response": []
		},
		{
			"name": "Create dietician No Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 401 - Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.test(\"Error message is 'Unauthorized'\", function () {",
							"    pm.expect(response.error).to.eql(\"Unauthorized\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "320202f1-965c-43c5-ad94-e4ac40501ccf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{dieticianFirstname}}\",\n  \"Lastname\": \"{{dieticianLastname}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "Create dietician duplicate email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"// Status Code Test",
							"pm.test(\"Status code is 400 or 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"const fullText = JSON.stringify(jsonData).toLowerCase();",
							"console.log(\"Full API Response:\", fullText);",
							"",
							"pm.test(\"Response contains duplicate email error\", function () {",
							"    const expectedKeyword = data.ExpectedMessage?.toLowerCase() || \"duplicate\";",
							"",
							"    pm.expect(fullText).to.include(expectedKeyword);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8d938e50-815d-486e-bba6-537b7c3a570f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{dieticianFirstname}}\",\n  \"Lastname\": \"{{dieticianLastname}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "All dietician users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"// Parse JSON once\r",
							"let data = pm.response.json();\r",
							"\r",
							"// 1. Response is an array\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(Array.isArray(data)).to.be.true;\r",
							"});\r",
							"\r",
							"// 2. Response array is not empty\r",
							"pm.test(\"Response array is not empty\", () => {\r",
							"    pm.expect(data.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// 3. First object has expected fields\r",
							"pm.test(\"First dietician object has expected fields\", () => {\r",
							"    const firstDietician = data[0]; // check the first object only\r",
							"    pm.expect(firstDietician).to.include.all.keys(\r",
							"        \"id\",\r",
							"        \"Firstname\",\r",
							"        \"Lastname\",\r",
							"        \"ContactNumber\",\r",
							"        \"DateOfBirth\",\r",
							"        \"Email\",\r",
							"        \"HospitalName\",\r",
							"        \"HospitalStreet\",\r",
							"        \"HospitalCity\",\r",
							"        \"HospitalPincode\",\r",
							"        \"Education\"\r",
							"    );\r",
							"});\r",
							"\r",
							" // 5. Status text is OK\r",
							"pm.test(\"Status text is OK\", () => {\r",
							"pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "5264c0c4-5310-4132-a9fa-b9a225bb17e6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "All dietician users Invalid endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"pm.test(\"Status code is 404 - Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Error message is 'Not Found'\", function () {\r",
							"    pm.expect(response.error).to.eql(\"Not Found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "47aa6aec-72c4-4724-b234-a078fe37cc69",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dieticians"
			},
			"response": []
		},
		{
			"name": "Update dietician ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09997f1b-d0eb-4ae6-abb6-8a5c88ade97c",
						"exec": [
							"// Parse the response once at the top",
							"let response = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Status text is OK\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validate each field is updated correctly",
							"pm.test(\"Firstname is updated\", function () {",
							"    pm.expect(response.Firstname).to.eql(pm.iterationData.get(\"uDFirstname\"));",
							"});",
							"",
							"pm.test(\"Lastname is updated\", function () {",
							"    pm.expect(response.Lastname).to.eql(pm.iterationData.get(\"uDLastname\"));",
							"});",
							"",
							"pm.test(\"ContactNumber is updated\", function () {",
							"    pm.expect(response.ContactNumber).to.eql(pm.iterationData.get(\"uDContactNumber\").toString());",
							"});",
							"",
							"pm.test(\"DateOfBirth is updated\", function () {",
							"    pm.expect(response.DateOfBirth).to.eql(pm.iterationData.get(\"uDDateOfBirth\").substring(0,Â 10));",
							"});",
							"",
							"pm.test(\"Email is updated\", function () {",
							"    pm.expect(response.Email).to.eql(pm.iterationData.get(\"uDEmail\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "16e57995-6604-45d6-814c-1e94604469e4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{uDFirstname}}\",\n  \"Lastname\": \"{{uDLastname}}\",\n  \"ContactNumber\": \"{{uDContactNumber}}\",\n  \"DateOfBirth\": \"{{uDDateOfBirth}}\",\n  \"Email\": \"{{uDEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "GET Dietician with ID 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6cf721d-db69-4873-a14b-3241dacec8c9",
						"exec": [
							"// 1. Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2. Response is an object\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    let data = pm.response.json();\r",
							"    pm.expect(typeof data).to.equal(\"object\");\r",
							"});\r",
							"// 3. Response is an object is not empty\r",
							"pm.test(\"Response object is not empty\", () => {\r",
							"    let data = pm.response.json();\r",
							"    pm.expect(Object.keys(data).length).to.be.above(0);\r",
							"});\r",
							"// 4. User expected fields are present in the response object.\r",
							"  pm.test(\"Dietician object has expected fields\", () => {\r",
							"    let data = pm.response.json();\r",
							"    pm.expect(data).to.have.all.keys(\r",
							"        \"id\",\r",
							"  \"Firstname\",\r",
							"  \"Lastname\",\r",
							"  \"ContactNumber\",\r",
							"  \"DateOfBirth\",\r",
							"  \"Email\",\r",
							"  \"HospitalName\",\r",
							"  \"HospitalStreet\",\r",
							"  \"HospitalCity\",\r",
							"  \"HospitalPincode\",\r",
							"  \"Education\"\r",
							"\r",
							"    );\r",
							"});\r",
							"\r",
							"// 5. Content-Type header is application/json\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// 6. Status text is OK\r",
							"pm.test(\"Status text is OK\", () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"// 7. \r",
							"const Expectedschema = {\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"ContactNumber\": {\"type\": \"string\"},\r",
							"    \"DateOfBirth\": {\"type\": \"string\"},\r",
							"    \"Education\": {\"type\": \"string\"},\r",
							"    \"Email\": {\"type\": \"string\"},\r",
							"    \"Firstname\": {\"type\": \"string\"},\r",
							"    \"HospitalCity\": {\"type\": \"string\"},\r",
							"    \"HospitalName\": {\"type\": \"string\"},\r",
							"    \"HospitalPincode\": {\"type\": \"string\"},\r",
							"    \"HospitalStreet\": {\"type\": \"string\"},\r",
							"    \"Lastname\": {\"type\": \"string\"},\r",
							"    \"id\": {\"type\": \"integer\"},\r",
							"    \r",
							"  },\r",
							"  \"required\": [ \"ContactNumber\",\"DateOfBirth\",\"Education\",\"Email\",\"Firstname\",\"HospitalCity\",\"HospitalName\",\"HospitalPincode\",\"HospitalStreet\",\r",
							"    \"Lastname\",\"id\"]\r",
							"};\r",
							"// Test script\r",
							"pm.test(\"Response should match schema\", function () {\r",
							"  pm.response.to.have.jsonSchema(Expectedschema);\r",
							"});\r",
							"\r",
							"\r",
							"//8 email format validation\r",
							"pm.test(\"Test 9:  Email format is valid\", () => {\r",
							"    let data = pm.response.json();\r",
							"    pm.expect(data.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"//9 Contact number is valid 10 digits\r",
							"pm.test(\"Contact number is valid 10 digits\", () => {\r",
							"    let data = pm.response.json();\r",
							"    pm.expect(data.ContactNumber).to.match(/^\\d{10}$/);\r",
							"});\r",
							"\r",
							"//10 Date of Birth is a valid date\r",
							"pm.test(\"Test Date of Birth is a valid date\", () => {\r",
							"    let data = pm.response.json();\r",
							"    let dob = Date.parse(data.DateOfBirth);\r",
							"    pm.expect(isNaN(dob)).to.be.false;\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7638487f-95ff-4a87-8d39-23975b0033a7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "GET dietician with id  401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2044f6e9-f2bd-40f2-98b9-694bdf696f85",
						"exec": [
							"pm.test(\"Status code is 401 no token given\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "06a1918c-e3fd-4baa-bb5f-b4029a4ec7da",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "Get Dietician with ID 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3118316-1d9c-4483-ab40-08563ff22d4f",
						"exec": [
							"pm.test(\"Status code is 404 - Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"/*\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Error code is 'Not Found'\", function () {\r",
							"    pm.expect(response.errorCode).to.eql(\"Not_Found\");\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Error message is 'Dietician does not exists'\", function () {\r",
							"    pm.expect(response.errorMessage).to.includes(\"Dietican with  does not exists\");\r",
							"}); */\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "cdb35c49-3d49-422b-a00c-b5fdebcd5a9d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/dietician"
			},
			"response": []
		},
		{
			"name": "Delete Dietician with ID 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba11f947-da51-432b-890b-d17bc048c820",
						"exec": [
							"pm.test(\"Status code is 200 dietician deleted\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Deleted dietician successfully \");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"//User expected fields are present in the response object.\r",
							"  pm.test(\"Dietician object has expected fields\", () => {\r",
							"    let data = pm.response.json();\r",
							"    pm.expect(data).to.have.all.keys( \"message\",\"data\",\"timestamp\");\r",
							"\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Data object has all expected keys\", function () {\r",
							"    pm.expect(responseJson.data).to.have.all.keys(\"id\",\"Firstname\",\"Lastname\",\"ContactNumber\",\"DateOfBirth\",\"Email\",\"HospitalName\", \"HospitalStreet\",\"HospitalCity\", \"HospitalPincode\",  \"Education\");\r",
							"});\r",
							"\r",
							"    //inside data values\r",
							"   //     \"id\",\"Firstname\",\"Lastname\",\"ContactNumber\",\"DateOfBirth\",\"Email\",\"HospitalName\",  \"HospitalStreet\",  \"HospitalCity\", \"HospitalPincode\",  \"Education\"\r",
							"    \r",
							"});\r",
							"\r",
							"//var jasonData= pm.response.jason();\r",
							"//pm.test(\" verifuy message \", function(){\r",
							"//pm.expect(jasonData.message).to.eql(\"message\");\r",
							"//pm.expect(jasonData.message).to.eql(\"Deleted dietician successfully with id-911\");\r",
							"\r",
							"\r",
							"//});\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify message\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Deleted dietician successfully with\");\r",
							"});\r",
							"\r",
							"const responseSchema ={\r",
							"type: \"object\",\r",
							"properties:{\r",
							"message:{\"type\":\"string\"},\r",
							"data:{\r",
							"type:\"object\",\r",
							"properties:{\r",
							"\"id\":{\"type\":\"integer\"},\r",
							" \"Firstname\": {\"type\": \"string\"},\"Lastname\": {\"type\": \"string\"}, \"ContactNumber\": {\"type\": \"string\"},\"DateOfBirth\": {\"type\": \"string\"},\"Email\": {\"type\": \"string\"},\"HospitalName\": {\"type\": \"string\"},\"HospitalStreet\": {\"type\": \"string\"}, \"HospitalPincode\": {\"type\": \"string\"},\"HospitalCity\": {\"type\": \"string\"},\"Education\": {\"type\": \"string\"}},\r",
							"\"required\": [ \"id\",\"Firstname\",\"Lastname\",\"ContactNumber\",\"DateOfBirth\",\"Email\",\"HospitalName\",\"HospitalStreet\",\"HospitalPincode\",\"HospitalCity\",\"Education\"],\r",
							"},\r",
							"timestamp:{\"type\":\"string\"},\r",
							"},\r",
							"\"required\":[\"message\",\"data\",\"timestamp\"],\r",
							"};\r",
							"\r",
							"pm.test(\"Response should match schema\", function () {\r",
							"  pm.response.to.have.jsonSchema(responseSchema);\r",
							"}); \r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "3ab4c7e0-0edf-4076-9aea-ac4c79506e47",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "Delete Dietician with ID 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "40570dc5-7318-46ad-8b42-1d7d7d721c17",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Error message is 'Dietician does not exists'\", function () {\r",
							"    pm.expect(response.errorMessage).to.includes(\"Dietican with  does not exists\");\r",
							"});\r",
							"/*\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Error message is 'Not Found'\", function () {\r",
							"    pm.expect(response.error).to.eql(\"Not Found\");\r",
							"});*/\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0d56c5d9-216f-453d-8f5b-47e7801fb414",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "Delete Dietician with ID 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f9217da7-be19-475d-9647-3b6b9ae386cd",
						"exec": [
							"pm.test(\"Status code is 401 no auth access\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"/*\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Error message is 'Unauthorized'\", function () {\r",
							"    pm.expect(response.error).to.includes(\"Unauthorized\");\r",
							"\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Message is ' An unexpected error occurred '\",function(){\r",
							"    pm.expect(response.message).to.equal(\"An unexpected error occurred\");\r",
							"}); */ \r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "85c0c9e6-84d1-4382-bef5-f80774beb9d8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "User login using dietician credential Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8abba0dd-3e27-4d30-ab7e-a5d639b0f9ad",
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							" ",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"dietician_token\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c2e7b4d6-a791-49f8-bb0d-e4690f00a252",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userLoginEmail\": \"{{dietician_email}}\",\n  \"password\": \"{{login_Password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/login"
			},
			"response": []
		},
		{
			"name": "Create new Patient Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cda8c963-6404-443a-84dd-216a5ec2988f",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							" ",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"//store patient_id in collection variable for future use.",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"patient_id\", jsonData.patientId);",
							"",
							"//check if response contains patientId and FirstName, LastName etc.",
							"pm.test(\"patientId and other variables are present in response\", function () {",
							"    try {",
							"        //var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"patientId\");",
							"        pm.expect(jsonData).to.have.property(\"FirstName\");",
							"        pm.expect(jsonData).to.have.property(\"LastName\");",
							"        pm.expect(jsonData).to.have.property(\"ContactNumber\");",
							"        pm.expect(jsonData).to.have.property(\"Email\");",
							"        pm.expect(jsonData).to.have.property(\"Allergy\");",
							"        pm.expect(jsonData).to.have.property(\"FoodPreference\");",
							"        pm.expect(jsonData).to.have.property(\"CuisineCategory\");",
							"        pm.expect(jsonData).to.have.property(\"DateOfBirth\");",
							"        pm.expect(jsonData).to.have.property(\"DieticianId\");",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response after creatting patient is not valid in JSON\");",
							"    }",
							"});",
							"",
							"// Get the first (and only) key from Vitals",
							"let fileID = Object.keys(jsonData.Vitals)[0];",
							"// Save it as a collection variable",
							"pm.collectionVariables.set(\"fileID\", fileID);",
							"console.log(\"fileID set to:\", fileID);",
							"console.log(\"fileID set to:\", fileID);",
							"",
							"pm.test(\"Vitals and other properties are present in response\", function () {",
							"    try {",
							"        //var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"Vitals\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"Weight\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"Height\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"Temperature\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"SP\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"DP\");",
							"    } catch (e) {",
							"        pm.expect.fail(\"Vitals is not valid JSON\");",
							"    }",
							"});",
							"",
							"//validate actual and expected data",
							"pm.test(\"Patient first name matches expected\", function() {",
							"    pm.expect(jsonData.FirstName).to.eql(pm.iterationData.get(\"patientFirstName\"));",
							"});",
							"",
							"pm.test(\"Patient LastName matches expected\", function() {",
							"    pm.expect(jsonData.LastName).to.eql(pm.iterationData.get(\"patientLastName\"));",
							"});",
							"",
							"pm.test(\"Patient ContactNumber matches expected\", function() {",
							"    pm.expect(jsonData.ContactNumber).to.eql(String(pm.iterationData.get(\"patientContactNumber\")));",
							"});",
							"",
							"pm.test(\"Patient Email matches expected\", function() {",
							"    pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"patientEmail\"));",
							"});",
							"",
							"pm.test(\"Patient Allergy matches expected\", function() {",
							"    pm.expect(jsonData.Allergy).to.eql(pm.iterationData.get(\"Allergy\"));",
							"});",
							"",
							"pm.test(\"Patient FoodPreference matches expected\", function() {",
							"    pm.expect(jsonData.FoodPreference).to.eql(pm.iterationData.get(\"FoodPreference\"));",
							"});",
							"",
							"pm.test(\"Patient CuisineCategory matches expected\", function() {",
							"    pm.expect(jsonData.CuisineCategory).to.eql(pm.iterationData.get(\"CuisineCategory\"));",
							"});",
							"",
							"pm.test(\"Patient DateOfBirth matches expected\", function() {",
							"    pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"patientDateOfBirth\"));",
							"});",
							"",
							"pm.test(\"patientWeight matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].Weight).to.eql(pm.iterationData.get(\"patientWeight\"));",
							"});",
							"",
							"pm.test(\"patientHeight matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].Height).to.eql(pm.iterationData.get(\"patientHeight\"));",
							"});",
							"",
							"pm.test(\"patientTemp matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].Temperature).to.eql(pm.iterationData.get(\"patientTemp\"));",
							"});",
							"",
							"pm.test(\"patientSP matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].SP).to.eql(pm.iterationData.get(\"patientSP\"));",
							"});",
							"",
							"pm.test(\"patientDP matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].DP).to.eql(pm.iterationData.get(\"patientDP\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "aa5be2ee-2503-44b8-a27b-0a8c3f575064",
						"exec": [
							"    // Build patientInfo JSON dynamically",
							"    let patientInfo = {",
							"        \"FirstName\": pm.iterationData.get(\"patientFirstName\"),",
							"        \"LastName\": pm.iterationData.get(\"patientLastName\"),",
							"        \"ContactNumber\": pm.iterationData.get(\"patientContactNumber\"),",
							"        \"Email\": pm.iterationData.get(\"patientEmail\"),",
							"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
							"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
							"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
							"        \"DateOfBirth\": pm.iterationData.get(\"patientDateOfBirth\")",
							"    };",
							"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
							"",
							"// Build vitalInfo JSON dynamically",
							"    let vitals = {",
							"        \"Height\": pm.iterationData.get(\"patientHeight\"),",
							"        \"Weight\": pm.iterationData.get(\"patientWeight\"),",
							"        \"Temperature\": pm.iterationData.get(\"patientTemp\"),",
							"        \"SP\": pm.iterationData.get(\"patientSP\"),",
							"        \"DP\": pm.iterationData.get(\"patientDP\")",
							"    };",
							"pm.collectionVariables.set(\"vitalInfo\", JSON.stringify(vitals));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "bf29db9f-d31c-4991-980d-504d201ee21f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "patientInfo",
							"value": "{{patientInfo}}",
							"type": "text",
							"uuid": "910ab544-c3fc-497b-b292-e2b09c14170c"
						},
						{
							"key": "vitals",
							"value": "{{vitalInfo}}",
							"type": "text",
							"uuid": "ea0d6923-c9df-454d-b678-3b7907df0b0a"
						},
						{
							"key": "file",
							"type": "file",
							"uuid": "cbc27a2a-e4d6-402a-bf6a-dd0dbad65db8",
							"src": "/Users/maya/Downloads/Sample reports/HyperThyroid_Report_final.pdf"
						},
						{
							"key": "file",
							"value": "{{Prediabeticfile}}",
							"type": "text",
							"uuid": "3e470c5a-8dd7-4e2e-99c6-f4d40565ba69"
						},
						{
							"key": "file",
							"value": "{{Hyperthyroidismfile}}",
							"type": "text",
							"uuid": "9695b306-5bee-45fc-a822-02843144d52f"
						},
						{
							"key": "file",
							"value": "{{Hypothyroidismfile}}",
							"type": "text",
							"uuid": "72c7a1d3-0f2e-42df-8a8b-8d61b3e076cf"
						}
					]
				},
				"url": "{{baseURL}}/patient"
			},
			"response": []
		},
		{
			"name": "Get Patients details by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1808e39-0aa4-4361-be48-87d33fc6954d",
						"exec": [
							"// 1. Status code is 200",
							"pm.test(\"Test 1 : Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"/*",
							"// 2. Response is an object",
							"pm.test(\"Responses is an object\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(typeof data).to.equal(\"object\");",
							"});",
							"// 3. Response is an object is not empty",
							"pm.test(\"Test 3: Response object is not empty\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(Object.keys(data).length).to.be.above(0);",
							"});",
							"// 4. Patient expected fields are present in the response object.",
							"pm.test(\"Test 4: Patient object has the expected fields\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data).to.have.all.keys(",
							"        \"patientId\",",
							"        \"FirstName\",",
							"        \"LastName\",",
							"        \"ContactNumber\",",
							"        \"Email\",",
							"        \"Allergy\",",
							"        \"FoodPreference\",",
							"        \"CuisineCategory\",",
							"        \"FileMorbidity\",",
							"        \"FileMorbidityCondition\",",
							"        \"DateOfBirth\",",
							"        \"DieticianId\",",
							"        \"Vitals\",",
							"        \"LastVisitDate\"",
							"    );",
							"});",
							"",
							"// 5. Content-Type header is application/json",
							"pm.test(\"Test 5: Content-Type header is application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// 6. Status text is OK",
							"pm.test(\"Test 6: Status text is OK\", () => {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"// 7. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
							"pm.test(\"Test 7: Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals\", () => {",
							"    let data = pm.response.json();",
							"",
							"    // Check FileMorbidity",
							"    pm.expect(data.FileMorbidity).to.be.an(\"object\");",
							"    let fileIdsMorbidity = Object.keys(data.FileMorbidity);",
							"    pm.expect(fileIdsMorbidity.length).to.be.above(0);",
							"    console.log(\"FileMorbidity fileIds:\", fileIdsMorbidity);",
							"",
							"    // Check FileMorbidityCondition",
							"    pm.expect(data.FileMorbidityCondition).to.be.an(\"object\");",
							"    let fileIdsCondition = Object.keys(data.FileMorbidityCondition);",
							"    pm.expect(fileIdsCondition.length).to.be.above(0);",
							"    console.log(\"FileMorbidityCondition fileIds:\", fileIdsCondition);",
							"",
							"    // Check Vitals",
							"    pm.expect(data.Vitals).to.be.an(\"object\");",
							"    let fileIdsVitals = Object.keys(data.Vitals);",
							"    pm.expect(fileIdsVitals.length).to.be.above(0);",
							"    console.log(\"Vitals fileIds:\", fileIdsVitals);",
							"",
							"    // Optional: Validate the same fileId exists across all three (if business logic requires)",
							"    let commonFileIds = fileIdsMorbidity.filter(id => fileIdsCondition.includes(id) && fileIdsVitals.includes(id));",
							"    pm.expect(commonFileIds.length).to.be.above(0);",
							"    console.log(\"Common fileIds across all of three:\", commonFileIds);",
							"});",
							"",
							"// 8. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
							"pm.test(\"Test 8: Field types are correct\", () => {",
							"    let data = pm.response.json();",
							"",
							"    pm.expect(data.patientId).to.be.a(\"number\");",
							"    pm.expect(data.FirstName).to.be.a(\"string\");",
							"    pm.expect(data.LastName).to.be.a(\"string\");",
							"    pm.expect(data.ContactNumber).to.be.a(\"string\");",
							"    pm.expect(data.Email).to.be.a(\"string\");",
							"    pm.expect(data.Allergy).to.be.a(\"string\");",
							"    pm.expect(data.FoodPreference).to.be.a(\"string\");",
							"    pm.expect(data.CuisineCategory).to.be.a(\"string\");",
							"    pm.expect(data.DateOfBirth).to.be.a(\"string\");",
							"    pm.expect(data.DieticianId).to.be.a(\"number\");",
							"});",
							"",
							"//9 email format validation",
							"pm.test(\"Test 9:  Email format is valid\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"//10 Contact number is valid 10 digits",
							"pm.test(\"Test 10: Contact number is valid 10 digits\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.ContactNumber).to.match(/^\\d{10}$/);",
							"});",
							"",
							"//11 Date of Birth is a valid date",
							"pm.test(\"Test 11: Date of Birth is a valid date\", () => {",
							"    let data = pm.response.json();",
							"    let dob = Date.parse(data.DateOfBirth);",
							"    pm.expect(isNaN(dob)).to.be.false;",
							"});",
							"//12 Allergy, FoodPreference, CuisineCategory are valid values",
							"pm.test(\"Test 12: Allergy, FoodPreference, CuisineCategory are valid values\", () => {",
							"    let data = pm.response.json();",
							"",
							"    const allowedAllergies = [\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"];",
							"    const allowedPreferences = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggitarian\", \"NonVeg\"];",
							"    const allowedCuisine = [\"Indian\", \"South Indian\", \"Rajasthani\", \"Punjabi\", /*... add rest */",
							"    /*",
							"",
							"    pm.expect(allowedAllergies).to.include(data.Allergy);",
							"    pm.expect(allowedPreferences).to.include(data.FoodPreference);",
							"    pm.expect(allowedCuisine).to.include(data.CuisineCategory);",
							"});",
							"",
							"//13 Vitals fields are correct types\"",
							"pm.test(\"Test 13: Vitals fields are correct types\", () => {",
							"    let data = pm.response.json();",
							"    let vitals = data.Vitals;",
							"    let fileIds = Object.keys(vitals);",
							"",
							"    fileIds.forEach(id => {",
							"        let v = vitals[id];",
							"        pm.expect(v.Weight).to.be.a(\"number\");",
							"        pm.expect(v.Height).to.be.a(\"number\");",
							"        pm.expect(v.Temperature).to.be.a(\"number\");",
							"        pm.expect(v.SP).to.be.a(\"number\");",
							"        pm.expect(v.DP).to.be.a(\"number\");",
							"    });",
							"});",
							"",
							"//14 FileMorbidity and FileMorbidityCondition fields are correct types\"",
							"let response = pm.response.json();",
							"",
							"// Check FileMorbidity exists",
							"pm.test(\"FileMorbidity exists in response\", function () {",
							"    pm.expect(response).to.have.property(\"FileMorbidity\");",
							"});",
							"",
							"// Extract FileMorbidity",
							"let fileMorbidity = response.FileMorbidity;",
							"",
							"//  Loop through each fileID",
							"for (let fileId in fileMorbidity) {",
							"    if (fileMorbidity.hasOwnProperty(fileId)) {",
							"        let morbidityData = fileMorbidity[fileId];",
							"",
							"        // Log fileID for clarity",
							"        console.log(\"Validating FileID:\", fileId);",
							"",
							"        // Check if morbidityData has any keys",
							"        let keys = Object.keys(morbidityData);",
							"",
							"        if (keys.length === 0) {",
							"            pm.test(`FileID ${fileId} has no morbidity data`, function () {",
							"                pm.expect(keys.length).to.eql(0);",
							"            });",
							"        } else {",
							"            // Validate each nested key-value pair",
							"            keys.forEach(function(key) {",
							"                let value = morbidityData[key];",
							"",
							"                pm.test(`FileID ${fileId} has ${key} with value ${value}`, function () {",
							"                    pm.expect(value).to.not.be.null;",
							"                    pm.expect(value).to.not.be.undefined;",
							"                    pm.expect(value).to.be.a('string');",
							"                });",
							"            });",
							"        }",
							"    }",
							"}",
							"//check for FileMorbidityConditions",
							"let fileConditions = response.FileMorbidityCondition;",
							"",
							"// Define expected data per condition",
							"let conditionExpectedData = {",
							"    \"Prediabetic\": {",
							"        \"HbA1c\": \"6.5 %\",",
							"        \"Average Glucose\": \"131.0 mg/dl\"",
							"    },",
							"    \"Thyroid: Hyperthyroidism\": {",
							"        \"T3\": \"6.3 ng/mL\",",
							"        \"T4\": \"15.7 Âµg/dL\",",
							"        \"TSH\": \"0.016 ÂµIU/mL\"",
							"    },",
							"    \"Thyroid: Hypothyroidism\": {",
							"        \"T4\": \"1.22 Âµg/dl\",",
							"        \"TSH\": \"100.0 mIU/L\"",
							"    },",
							"    \"Blood Pressure: Normal\": {}",
							"};",
							"",
							"pm.test(\"FileMorbidity exists\", function() {",
							"    pm.expect(fileMorbidity).to.not.be.null;",
							"});",
							"",
							"//Loop through each fileID",
							"for (let fileId in fileMorbidity) {",
							"    if (fileMorbidity.hasOwnProperty(fileId)) {",
							"        let morbidityData = fileMorbidity[fileId];",
							"        let conditionRaw = fileConditions[fileId];",
							"",
							"        // Trim condition to remove newline and spaces",
							"        let condition = conditionRaw.trim();",
							"",
							"        console.log(`Validating fileID: ${fileId} with condition: ${condition}`);",
							"",
							"        // Get expected data for this condition",
							"        let expectedData = conditionExpectedData[condition];",
							"",
							"        // If no expected data defined, skip",
							"        if (!expectedData) {",
							"            console.log(`No expected data defined for condition: ${condition}`);",
							"            continue;",
							"        }",
							"",
							"        // If expected data is empty (e.g. Blood Pressure), ensure no keys present",
							"        if (Object.keys(expectedData).length === 0) {",
							"            pm.test(`FileID ${fileId} should have no morbidity data`, function () {",
							"                pm.expect(Object.keys(morbidityData).length).to.eql(0);",
							"            });",
							"        } else {",
							"            // Validate each expected key and value",
							"            for (let key in expectedData) {",
							"                if (expectedData.hasOwnProperty(key)) {",
							"                    pm.test(`FileID ${fileId} has ${key} with expected value ${expectedData[key]}`, function () {",
							"                        pm.expect(morbidityData).to.have.property(key, expectedData[key]);",
							"                    });",
							"                }",
							"            }",
							"        }",
							"    } ",
							"}",
							"*/",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4f592422-f8dd-4a1d-b75e-2bb197a5847e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/patient/{{patient_id}}"
			},
			"response": []
		},
		{
			"name": "Get PatientIdinvalidAuth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f59cfb3-2fa6-474c-af87-7c6aecf17535",
						"exec": [
							"// 1. Status code is 403",
							"pm.test(\"Test 1 : Status code is 403 since it uses the wrong token\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "1814e64a-5759-4a1d-85bf-f8cfabe977e5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/patient/{{patient_id}}"
			},
			"response": []
		},
		{
			"name": "Get InvalidPatientID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af9a3dcf-30d3-48cb-9d78-615b3f640bfa",
						"exec": [
							"// 1. Status code is 404",
							"pm.test(\"Test 1 : Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "556e861d-ee96-4d04-9d39-9b2800335937",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/patient/300000"
			},
			"response": []
		},
		{
			"name": "Get PatientIdInvalidAuthType",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3e4cdf5-3cee-4332-8e99-3d932de12be0",
						"exec": [
							"// 1. Status code is 401",
							"pm.test(\"Test 1 : Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a2684235-4421-429c-a38e-49bbd42bf82d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{password}}",
						"username": "{{username}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/patient/{{patient_id}}"
			},
			"response": []
		},
		{
			"name": "Update patient by patientId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "91242e52-cdfd-4744-8a13-c469a8e30ae0",
						"exec": [
							"// Build patientInfo JSON dynamically",
							"let updatePatientInfo = {",
							"    \"FirstName\": pm.iterationData.get(\"updatepatientFirstName\"),",
							"    \"LastName\": pm.iterationData.get(\"updatepatientLastName\"),",
							"    \"ContactNumber\": pm.iterationData.get(\"updatepatientContactNumber\"),",
							"    \"Email\": pm.iterationData.get(\"updatepatientEmail\"),",
							"    \"Allergy\": pm.iterationData.get(\"updatepatientAllergy\"),",
							"    \"FoodPreference\": pm.iterationData.get(\"updateFoodPreference\"),",
							"    \"CuisineCategory\": pm.iterationData.get(\"updatepatientCuisineCategory\"),",
							"    \"DateOfBirth\": pm.iterationData.get(\"updatepatientDateOfBirth\")",
							"};",
							"pm.collectionVariables.set(\"updatePatientInfo\", JSON.stringify(updatePatientInfo));",
							"",
							"// Build vitalInfo JSON dynamically",
							"let vital = {",
							"    \"Height\": pm.iterationData.get(\"updatepatientHeight\"),",
							"    \"Weight\": pm.iterationData.get(\"updatepatientWeight\"),",
							"    \"Temperature\": pm.iterationData.get(\"updatepatientTemp\"),",
							"    \"SP\": pm.iterationData.get(\"updatedpatientSP\"),",
							"    \"DP\": pm.iterationData.get(\"updatedpatientDP\")",
							"};",
							"pm.collectionVariables.set(\"updateVitalInfo\", JSON.stringify(vital));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "94f50127-ebeb-4894-b75f-07058daac656",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let response = pm.response.json();",
							"console.log(\"Response body:\", JSON.stringify(response));",
							"let expectedFirstname = pm.iterationData.get(\"updatepatientFirstName\")",
							"let expectedLastname = pm.iterationData.get(\"updatepatientLastName\")",
							"",
							"let expectedContactNumber = Number(pm.iterationData.get(\"updatepatientContactNumber\"))",
							"let expectedpatientEmail = pm.iterationData.get(\"updatepatientEmail\")",
							"",
							"// Get expected values from CSV or iteration data",
							"let expectedWeight = Number(pm.iterationData.get(\"updatepatientHeight\"));",
							"let expectedHeight = Number(pm.iterationData.get(\"updatepatientHeight\"));",
							"let expectedTemperature = Number(pm.iterationData.get(\"updatepatientTemp\"));",
							"let expectedSP = Number(pm.iterationData.get(\"updatedpatientSP\"));",
							"let expectedDP = Number(pm.iterationData.get(\"updatedpatientDP\"));",
							"",
							"console.log(\"expectedFirstname is :\",expectedFirstname)",
							"console.log(\"expectedLastname is :\",expectedLastname)",
							"console.log(\"expectedContactNumber is :\",expectedContactNumber)",
							"console.log(\"expectedpatientEmail is :\",expectedpatientEmail)",
							"pm.test(\"FirstName updated correctly\", function () {",
							"    pm.expect(response.FirstName).to.eql(expectedFirstname);",
							"});",
							"",
							"pm.test(\"LastName updated correctly\", function () {",
							"    pm.expect(response.LastName).to.eql(expectedLastname);",
							"});",
							"",
							"",
							"pm.test(\"ContactNumber updated correctly\", function () {",
							"    pm.expect(Number(response.ContactNumber)).to.eql(expectedContactNumber);",
							"});",
							"console.log(\"testing\")",
							"pm.test(\"Email updated correctly\", function () {",
							"    pm.expect(response.Email).to.eql(expectedpatientEmail);",
							"});",
							"// Loop through each vitals record",
							"let vitals = response.Vitals;",
							"for (let key in vitals) {",
							"    if (vitals.hasOwnProperty(key)) {",
							"        let record = vitals[key];",
							"",
							"        pm.test(`Weight for record ${key} matches expected`, function () {",
							"            pm.expect(record.Weight).to.eql(expectedWeight);",
							"        });",
							"",
							"        pm.test(`Height for record ${key} matches expected`, function () {",
							"            // Using closeTo for minor floating-point differences",
							"            pm.expect(record.Height).to.be.closeTo(expectedHeight, 0.01);",
							"        });",
							"",
							"        pm.test(`Temperature for record ${key} matches expected`, function () {",
							"            pm.expect(record.Temperature).to.eql(expectedTemperature);",
							"        });",
							"",
							"        pm.test(`SP for record ${key} matches expected`, function () {",
							"            pm.expect(record.SP).to.eql(expectedSP);",
							"        });",
							"",
							"        pm.test(`DP for record ${key} matches expected`, function () {",
							"            pm.expect(record.DP).to.eql(expectedDP);",
							"        });",
							"    }",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8d7b2137-ee05-4c6f-b712-868ce48c5a4e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "patientInfo",
							"value": "{{updatePatientInfo}}",
							"type": "text",
							"uuid": "9aca5914-6480-49e4-ba67-e3889f03c50f"
						},
						{
							"key": "vitals",
							"value": "{{updateVitalInfo}}",
							"type": "text",
							"uuid": "1f597aa4-c29c-41fd-a73d-92e9a75a42bc"
						}
					]
				},
				"url": "{{baseURL}}/patient/{{patient_id}}"
			},
			"response": []
		},
		{
			"name": "Update new reports patientID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54813b25-6c79-4ee9-8954-6dad31a3b586",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Response Structure Tests",
							"pm.test(\"Response has all expected keys\", function () {",
							"    let res = pm.response.json();",
							"    pm.expect(res).to.include.all.keys(",
							"        \"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\",",
							"        \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\",",
							"        \"FileMorbidity\", \"FileMorbidityCondition\",",
							"        \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"",
							"    );",
							"});",
							"//. Mandatory Field Tests",
							"pm.test(\"Mandatory fields are populated\", function () {",
							"    let res = pm.response.json();",
							"    pm.expect(res.FirstName).to.not.be.empty;",
							"    pm.expect(res.LastName).to.not.be.empty;",
							"    pm.expect(res.Email).to.not.be.empty;",
							"    pm.expect(res.ContactNumber).to.not.be.empty;",
							"    pm.expect(res.DateOfBirth).to.not.be.empty;",
							"    pm.expect(res.Allergy).to.not.be.empty;",
							"    pm.expect(res.CuisineCategory).to.not.be.empty;",
							"});",
							"",
							"//If uploading file, validate FileMorbidity contains the fileId and morbid conditions.",
							"pm.test(\"FileMorbidity has fileId entry\", function () {",
							"    let res = pm.response.json();",
							"    let fileIds = Object.keys(res.FileMorbidity);",
							"    pm.expect(fileIds.length).to.be.above(0);",
							"});",
							"//Validate Vitals data (if provided) has correct types and values.",
							"pm.test(\"Vitals are valid if present\", function () {",
							"    let res = pm.response.json();",
							"    let vitals = res.Vitals;",
							"    Object.keys(vitals).forEach(fid => {",
							"        pm.expect(vitals[fid].Weight).to.be.a('number');",
							"        pm.expect(vitals[fid].Height).to.be.a('number');",
							"        pm.expect(vitals[fid].Temperature).to.be.a('number');",
							"        pm.expect(vitals[fid].SP).to.be.a('number');",
							"        pm.expect(vitals[fid].DP).to.be.a('number');",
							"    });",
							"});",
							"let response = pm.response.json();",
							"let fileMorbidity = response.FileMorbidity;",
							"let fileConditions = response.FileMorbidityCondition;",
							"",
							"// Define expected data per condition",
							"let conditionExpectedData = {",
							"    \"Prediabetic\": {",
							"        \"HbA1c\": \"6.5 %\",",
							"        \"Average Glucose\": \"131.0 mg/dl\"",
							"    },",
							"    \"Thyroid: Hyperthyroidism\": {",
							"        \"T3\": \"6.3 ng/mL\",",
							"        \"T4\": \"15.7 Âµg/dL\",",
							"        \"TSH\": \"0.016 ÂµIU/mL\"",
							"    },",
							"    \"Thyroid: Hypothyroidism\": {",
							"        \"T4\": \"1.22 Âµg/dl\",",
							"        \"TSH\": \"100.0 mIU/L\"",
							"    },",
							"    \"Blood Pressure: Normal\": {}",
							"};",
							"",
							"pm.test(\"FileMorbidity exists\", function() {",
							"    pm.expect(fileMorbidity).to.not.be.null;",
							"});",
							"",
							"//Loop through each fileID",
							"for (let fileId in fileMorbidity) {",
							"    if (fileMorbidity.hasOwnProperty(fileId)) {",
							"        let morbidityData = fileMorbidity[fileId];",
							"        let conditionRaw = fileConditions[fileId];",
							"",
							"        // Trim condition to remove newline and spaces",
							"        let condition = conditionRaw.trim();",
							"",
							"        console.log(`Validating fileID: ${fileId} with condition: ${condition}`);",
							"",
							"        // Get expected data for this condition",
							"        let expectedData = conditionExpectedData[condition];",
							"",
							"        // If no expected data defined, skip",
							"        if (!expectedData) {",
							"            console.log(`No expected data defined for condition: ${condition}`);",
							"            continue;",
							"        }",
							"",
							"        // If expected data is empty (e.g. Blood Pressure), ensure no keys present",
							"        if (Object.keys(expectedData).length === 0) {",
							"            pm.test(`FileID ${fileId} should have no morbidity data`, function () {",
							"                pm.expect(Object.keys(morbidityData).length).to.eql(0);",
							"            });",
							"        } else {",
							"            // Validate each expected key and value",
							"            for (let key in expectedData) {",
							"                if (expectedData.hasOwnProperty(key)) {",
							"                    pm.test(`FileID ${fileId} has ${key} with expected value ${expectedData[key]}`, function () {",
							"                        pm.expect(morbidityData).to.have.property(key, expectedData[key]);",
							"                    });",
							"                }",
							"            }",
							"        }",
							"    }",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "207282ac-f637-4bba-863b-8f766c805f81",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"uuid": "d849fc00-0a26-456a-b94b-21afa400cdbc",
							"src": "/Users/maya/Downloads/Sample reports/CBC-sample 1.pdf"
						},
						{
							"key": "vitals",
							"value": "{ \"Weight\": 75.5, \"Height\": 5.4,\"Temperature\": 44,       \"SP\": 80,       \"DP\": 70     }",
							"type": "text",
							"uuid": "f736bc90-a2d0-488b-bdf7-816bbda42a7a"
						}
					]
				},
				"url": "{{baseURL}}/patient/newReports/{{patient_id}}"
			},
			"response": []
		},
		{
			"name": "Delete invalid PatientId",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ef6e6fb-c3a3-445b-9d45-965169512d2e",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "378c0e82-bee2-48ff-838e-b55b195a4a5b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/patient/600000"
			},
			"response": []
		},
		{
			"name": "Delete patient by userId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63c4ffa8-202c-43ba-af02-ab41683ef3b1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "66990356-b61e-4c44-935b-9b3db54941f0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{dietician_token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/patient/{{patient_id}}"
			},
			"response": []
		},
		{
			"name": "Delete information of dietician with the given id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af9281e1-c09c-4dfa-9012-0f2c7491fe5b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "01ad530c-d21c-4b04-af92-7e4fca1658eb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		},
		{
			"name": "Delete Dietician with id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af9281e1-c09c-4dfa-9012-0f2c7491fe5b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "960ca07f-9482-40ed-a96c-528d7cd9b122",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseURL}}/dietician/{{dietician_id}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "42186ef0-396e-48ac-8c50-6766863fff23",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "996140f1-fedc-4d85-99de-423b86d7dc9a",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "dietician_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "dietician_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "login_Password",
			"value": "",
			"type": "string"
		},
		{
			"key": "dietician_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "patient_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "patientInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "updatePatientInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "fileID",
			"value": "",
			"type": "string"
		},
		{
			"key": "vitalInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "updateVitalInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "Prediabeticfile",
			"value": "",
			"type": "string"
		},
		{
			"key": "Hyperthyroidismfile",
			"value": "",
			"type": "string"
		},
		{
			"key": "Hypothyroidismfile",
			"value": "",
			"type": "string"
		}
	]
}