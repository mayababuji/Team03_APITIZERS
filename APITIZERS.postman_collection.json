{
	"info": {
		"_postman_id": "12ca18bf-1207-483e-acf7-8e04bd901ac6",
		"name": "Maya Dietician Hackathon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45210294",
		"_collection_link": "https://mayababuji-8939053.postman.co/workspace/1e87895d-c023-4a6f-82a7-4ec49cdfc61e/collection/45210294-12ca18bf-1207-483e-acf7-8e04bd901ac6?action=share&source=collection_link&creator=45210294"
	},
	"item": [
		{
			"name": "POST Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"let response = pm.response.json();",
							"",
							"// Extract the token",
							"let token = response.token;",
							"",
							"// Set it as a collection variable",
							"pm.collectionVariables.set(\"dieticianToken\", token);",
							"",
							"// Optional: log it for debug",
							"console.log(\"Token saved in collection variable: \" + token);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in POST Admin Login is \"+ requestType)",
							"// if (requestType==\"getUserName\"||requestType==\"deleteUserName\"){",
							"//     pm.execution.skipRequest();",
							"// }",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at POST ADMIN LOGIN is  \"+ stopRun)",
							"if (requestType!=\"createAdmin\"){",
							"    pm.execution.skipRequest();",
							"}",
							"",
							"",
							"if (stopRun === \"true\") {",
							"    console.log(\"Stopping run as deleteDietician executed.\");",
							"   pm.setNextRequest(null)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userLoginEmail\": \"Team707@gmail.com\",\n  \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hackdieticianbaseurl}}dietician/login",
					"host": [
						"{{hackdieticianbaseurl}}dietician"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a dietician",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"let response = pm.response.json();",
							"",
							"// Extract the dietician ID",
							"let dieticianId = response.id;",
							"",
							"// Set it as a collection variable",
							"pm.collectionVariables.set(\"deiticianID\", dieticianId);",
							"",
							"// Optional: log it for debug",
							"console.log(\"Dietician ID saved in collection variable: \" + dieticianId);",
							"",
							"// Extract the emailID of dietician ",
							"let dieticianEmailId = response.Email;",
							"",
							"// Set it as a collection variable",
							"pm.collectionVariables.set(\"dieticianEmailId\", dieticianEmailId);",
							"",
							"// Optional: log it for debug",
							"console.log(\"Dietician EMAIL ID saved in collection variable: \" + dieticianEmailId);",
							"",
							"// Extract the emailID password of dietician ",
							"let dieticianPassword = response.loginPassword;",
							"",
							"// Set it as a collection variable",
							"pm.collectionVariables.set(\"dieticianPassword\", dieticianPassword);",
							"",
							"// Optional: log it for debug",
							"console.log(\"Dietician EMAIL password saved in collection variable: \" + dieticianPassword);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in CREATE a dietician is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"",
							"console.log(\"The value of stoprun at CREATE DIETICIAN is  \"+ stopRun)",
							"if (requestType!=\"createDietician\"){",
							"    pm.execution.skipRequest();",
							"}",
							"else{",
							"    console.log(\"Executing createDietician request for: \" + pm.iterationData.get(\"Email\"));",
							"}",
							"if (stopRun === \"true\") {",
							"    console.log(\"Stopping run as deleteDietician executed.\");",
							"      pm.setNextRequest(null)",
							"}",
							"// if(reqType === \"createDietician\") {",
							"//     console.log(\"Executing createDietician request for: \" + pm.iterationData.get(\"Email\"));",
							"// } else {",
							"//     console.log(\"Skipping createDietician request as requestType is: \" + reqType);",
							"//     // Allow other requests to continue; do not skip unless needed",
							"// }",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}"
				},
				"url": {
					"raw": "{{hackdieticianbaseurl}}dietician/dietician",
					"host": [
						"{{hackdieticianbaseurl}}dietician"
					],
					"path": [
						"dietician"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dietician Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// No pm.response.json() here because pre-request runs BEFORE request is sent.",
							"// Instead, confirm variables are available:",
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in DIETICIAN login is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at DETICIAN LOGIN   is  \"+ stopRun)",
							"if (requestType!=\"createPatient\"){",
							"    pm.execution.skipRequest();",
							"}",
							"if (stopRun === \"true\") {",
							"    console.log(\"Stopping run as deleteDietician executed.\");",
							"    pm.setNextRequest(null)",
							"   ",
							"}",
							"console.log(\"Dietician Email ID for login: \" + pm.collectionVariables.get(\"dieticianEmailId\"));",
							"console.log(\"Dietician Password for login: \" + pm.collectionVariables.get(\"dieticianPassword\"));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"let response = pm.response.json();",
							"",
							"// Extract the token",
							"let patientToken = response.token;",
							"",
							"// Set it as a collection variable",
							"pm.collectionVariables.set(\"patientToken\", patientToken);",
							"",
							"// Log it for debug",
							"console.log(\"Patient token saved in collection variable: \" + patientToken);",
							"",
							"// if(patientToken) {",
							"//     console.log(\"Dietician login successful. Proceeding to delete dietician.\");",
							"//     postman.setNextRequest(\"Delete diatecian\");",
							"// } else {",
							"//     console.log(\"Dietician login failed. Not proceeding to delete dietician.\");",
							"//     postman.setNextRequest(null);",
							"// }",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmailId}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hackdieticianbaseurl}}dietician/login",
					"host": [
						"{{hackdieticianbaseurl}}dietician"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Patient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in CREATE PATIENT  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at CREATE PATIENT  is  \"+ stopRun)",
							"if (stopRun === \"true\") {",
							"    console.log(\"Stopping run as deleteDietician executed.\");",
							"    postman.setNextRequest(null);",
							"   // pm.setNextRequest(null)",
							"}",
							"if (requestType !== \"createPatient\") {",
							"    console.log(\"Skipping this iteration as requestType is not createPatient\");",
							"    ",
							"     pm.execution.skipRequest();",
							"} else {",
							"    // Build patientInfo JSON dynamically",
							"    let patientInfo = {",
							"        \"FirstName\": pm.iterationData.get(\"Firstname\"),",
							"        \"LastName\": pm.iterationData.get(\"Lastname\"),",
							"        \"ContactNumber\": pm.iterationData.get(\"ContactNumber\"),",
							"        \"Email\": pm.iterationData.get(\"Email\"),",
							"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
							"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
							"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
							"        \"DateOfBirth\": pm.iterationData.get(\"DateOfBirth\")",
							"    };",
							"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
							"    let vitals = {",
							"        \"Weight\": pm.iterationData.get(\"Weight\"),",
							"        \"Height\": pm.iterationData.get(\"Height\"),",
							"        \"Temperature\": pm.iterationData.get(\"Temperature\"),",
							"        \"SP\": pm.iterationData.get(\"SP\"),",
							"        \"DP\": pm.iterationData.get(\"DP\")",
							"    };",
							"    pm.collectionVariables.set(\"vitals\", JSON.stringify(vitals));",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"let response = pm.response.json();",
							"",
							"// Extract the dietician ID",
							"let patientId = response.patientId;",
							"",
							"// Set it as a collection variable",
							"pm.collectionVariables.set(\"patientId\", patientId);",
							"",
							"// Optional: log it for debug",
							"console.log(\"patientId ID saved in collection variable: \" + patientId);",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							" ",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
							"});",
							"//store patient_id in collection variable for future use.",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"patient_id\", jsonData.patientId);",
							"//check if response contains userId and userFirstName, userLastName etc.",
							"pm.test(\"patientId and other variables are present in response\", function () {",
							"    try {",
							"        //var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"patientId\");",
							"        pm.expect(jsonData).to.have.property(\"FirstName\");",
							"        pm.expect(jsonData).to.have.property(\"LastName\");",
							"        pm.expect(jsonData).to.have.property(\"ContactNumber\");",
							"        pm.expect(jsonData).to.have.property(\"Email\");",
							"        pm.expect(jsonData).to.have.property(\"Allergy\");",
							"        pm.expect(jsonData).to.have.property(\"FoodPreference\");",
							"        pm.expect(jsonData).to.have.property(\"CuisineCategory\");",
							"        pm.expect(jsonData).to.have.property(\"DateOfBirth\");",
							"        pm.expect(jsonData).to.have.property(\"DieticianId\");",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response after creatting patient is not valid in JSON\");",
							"    }",
							"});",
							"",
							"",
							"",
							"//pm.setNextRequest(\"Delete Patient\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/Users/maya/Downloads/Sample reports/Hypo Thyroid-Report.pdf"
						},
						{
							"key": "file",
							"value": "{{PatientFilePathHyperThroid}},{{PatientFilePathDiabetic}},{{PatientFilePathCBC}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "patientInfo",
							"value": "{{patientInfo}}",
							"type": "text"
						},
						{
							"key": "vitals",
							"value": "{{vitals}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
							"if (requestType!=\"getPatientID\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 200",
							"pm.test(\"Test 1 : Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2. Response is an object",
							"pm.test(\"Response is an object\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(typeof data).to.equal(\"object\");",
							"});",
							"// 3. Response is an object is not empty",
							"pm.test(\"Test 3: Response object is not empty\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(Object.keys(data).length).to.be.above(0);",
							"});",
							"// 4. Patient expected fields are present in the response object.",
							"pm.test(\"Test 4: Patient object has expected fields\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data).to.have.all.keys(",
							"        \"patientId\",",
							"        \"FirstName\",",
							"        \"LastName\",",
							"        \"ContactNumber\",",
							"        \"Email\",",
							"        \"Allergy\",",
							"        \"FoodPreference\",",
							"        \"CuisineCategory\",",
							"        \"FileMorbidity\",",
							"        \"FileMorbidityCondition\",",
							"        \"DateOfBirth\",",
							"        \"DieticianId\",",
							"        \"Vitals\",",
							"        \"LastVisitDate\"",
							"    );",
							"});",
							"",
							"// 5. Content-Type header is application/json",
							"pm.test(\"Test 5: Content-Type header is application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// 6. Status text is OK",
							"pm.test(\"Test 6: Status text is OK\", () => {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"// 7. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
							"pm.test(\"Test 7: Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals\", () => {",
							"    let data = pm.response.json();",
							"",
							"    // Check FileMorbidity",
							"    pm.expect(data.FileMorbidity).to.be.an(\"object\");",
							"    let fileIdsMorbidity = Object.keys(data.FileMorbidity);",
							"    pm.expect(fileIdsMorbidity.length).to.be.above(0);",
							"    console.log(\"FileMorbidity fileIds:\", fileIdsMorbidity);",
							"",
							"    // Check FileMorbidityCondition",
							"    pm.expect(data.FileMorbidityCondition).to.be.an(\"object\");",
							"    let fileIdsCondition = Object.keys(data.FileMorbidityCondition);",
							"    pm.expect(fileIdsCondition.length).to.be.above(0);",
							"    console.log(\"FileMorbidityCondition fileIds:\", fileIdsCondition);",
							"",
							"    // Check Vitals",
							"    pm.expect(data.Vitals).to.be.an(\"object\");",
							"    let fileIdsVitals = Object.keys(data.Vitals);",
							"    pm.expect(fileIdsVitals.length).to.be.above(0);",
							"    console.log(\"Vitals fileIds:\", fileIdsVitals);",
							"",
							"    // Optional: Validate the same fileId exists across all three (if business logic requires)",
							"    let commonFileIds = fileIdsMorbidity.filter(id => fileIdsCondition.includes(id) && fileIdsVitals.includes(id));",
							"    pm.expect(commonFileIds.length).to.be.above(0);",
							"    console.log(\"Common fileIds across all three:\", commonFileIds);",
							"});",
							"",
							"// 8. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
							"pm.test(\"Test 8: Field types are correct\", () => {",
							"    let data = pm.response.json();",
							"",
							"    pm.expect(data.patientId).to.be.a(\"number\");",
							"    pm.expect(data.FirstName).to.be.a(\"string\");",
							"    pm.expect(data.LastName).to.be.a(\"string\");",
							"    pm.expect(data.ContactNumber).to.be.a(\"string\");",
							"    pm.expect(data.Email).to.be.a(\"string\");",
							"    pm.expect(data.Allergy).to.be.a(\"string\");",
							"    pm.expect(data.FoodPreference).to.be.a(\"string\");",
							"    pm.expect(data.CuisineCategory).to.be.a(\"string\");",
							"    pm.expect(data.DateOfBirth).to.be.a(\"string\");",
							"    pm.expect(data.DieticianId).to.be.a(\"number\");",
							"});",
							"",
							"//9 email format validation",
							"pm.test(\"Test 9:  Email format is valid\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"//10 Contact number is valid 10 digits",
							"pm.test(\"Test 10: Contact number is valid 10 digits\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.ContactNumber).to.match(/^\\d{10}$/);",
							"});",
							"",
							"//11 Date of Birth is a valid date",
							"pm.test(\"Test 11: Date of Birth is a valid date\", () => {",
							"    let data = pm.response.json();",
							"    let dob = Date.parse(data.DateOfBirth);",
							"    pm.expect(isNaN(dob)).to.be.false;",
							"});",
							"//12 Allergy, FoodPreference, CuisineCategory are valid values",
							"pm.test(\"Test 12: Allergy, FoodPreference, CuisineCategory are valid values\", () => {",
							"    let data = pm.response.json();",
							"",
							"    const allowedAllergies = [\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"];",
							"    const allowedPreferences = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggitarian\", \"NonVeg\"];",
							"    const allowedCuisine = [\"Indian\", \"South Indian\", \"Rajasthani\", \"Punjabi\", /*... add rest */];",
							"",
							"    pm.expect(allowedAllergies).to.include(data.Allergy);",
							"    pm.expect(allowedPreferences).to.include(data.FoodPreference);",
							"    pm.expect(allowedCuisine).to.include(data.CuisineCategory);",
							"});",
							"",
							"//13 Vitals fields are correct types\"",
							"pm.test(\"Test 13: Vitals fields are correct types\", () => {",
							"    let data = pm.response.json();",
							"    let vitals = data.Vitals;",
							"    let fileIds = Object.keys(vitals);",
							"",
							"    fileIds.forEach(id => {",
							"        let v = vitals[id];",
							"        pm.expect(v.Weight).to.be.a(\"number\");",
							"        pm.expect(v.Height).to.be.a(\"number\");",
							"        pm.expect(v.Temperature).to.be.a(\"number\");",
							"        pm.expect(v.SP).to.be.a(\"number\");",
							"        pm.expect(v.DP).to.be.a(\"number\");",
							"    });",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientIdinvalidAuth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 403",
							"pm.test(\"Test 1 : Status code is 403 since it uses the wrong token\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
							"if (requestType!=\"getPatientID\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get InvalidPatientID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
							"if (requestType!=\"getPatientID\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 404",
							"pm.test(\"Test 1 : Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/10000000",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"10000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientIdInvalidAuthType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 401",
							"pm.test(\"Test 1 : Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
							"if (requestType!=\"getPatientID\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientIDAplhanum",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 400",
							"pm.test(\"Test 1 : Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in GET  Patient ID  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at GET  Patient ID  is  \"+ stopRun)",
							"if (requestType!=\"getPatientID\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/A",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"A"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Patient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in Update Patient    is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at Update Patient   is  \"+ stopRun)",
							"if (requestType!=\"updatePatientID\"){",
							"    pm.execution.skipRequest();",
							"}",
							"else {",
							"    // Build patientInfo JSON dynamically",
							"    let patientInfo = {",
							"        \"FirstName\": pm.iterationData.get(\"Firstname\"),",
							"        \"LastName\": pm.iterationData.get(\"Lastname\"),",
							"        \"ContactNumber\": pm.iterationData.get(\"ContactNumber\"),",
							"        \"Email\": pm.iterationData.get(\"Email\"),",
							"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
							"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
							"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
							"        \"DateOfBirth\": pm.iterationData.get(\"DateOfBirth\")",
							"    };",
							"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
							"    let vitals = {",
							"        \"Weight\": pm.iterationData.get(\"Weight\"),",
							"        \"Height\": pm.iterationData.get(\"Height\"),",
							"        \"Temperature\": pm.iterationData.get(\"Temperature\"),",
							"        \"SP\": pm.iterationData.get(\"SP\"),",
							"        \"DP\": pm.iterationData.get(\"DP\")",
							"    };",
							"    pm.collectionVariables.set(\"vitals\", JSON.stringify(vitals));",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Status text is OK\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"let expectedFirstname = pm.iterationData.get(\"Firstname\")",
							"let expectedLastname = pm.iterationData.get(\"Lastname\")",
							"",
							"pm.test(\"FirstName updated correctly\", function () {",
							"    pm.expect(response.FirstName).to.eql(expectedFirstname);",
							"});",
							"",
							"pm.test(\"LastName updated correctly\", function () {",
							"    pm.expect(response.LastName).to.eql(expectedLastname);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "patientInfo",
							"value": "{{patientInfo}}",
							"type": "text"
						},
						{
							"key": "vitals",
							"value": "{{vitals}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Patient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in DELETE Patient  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at DELETE Patient is  \"+ stopRun)",
							"if (requestType!=\"deletePatient\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{patientId}}",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete diatecian",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.environment.set(\"stopRun\", \"true\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestType = pm.iterationData.get(\"requestType\");",
							"console.log(\"The request type in DELETE Dietician  is \"+ requestType)",
							"let stopRun = pm.environment.get(\"stopRun\");",
							"console.log(\"The value of stoprun at DELETE dietician is  \"+ stopRun)",
							"if (requestType!=\"deleteDietician\"){",
							"    pm.execution.skipRequest();",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{hackdieticianbaseurl}}dietician/dietician/{{deiticianID}}",
					"host": [
						"{{hackdieticianbaseurl}}dietician"
					],
					"path": [
						"dietician",
						"{{deiticianID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "hackdieticianbaseurl",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/",
			"type": "string"
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "deiticianID",
			"value": ""
		},
		{
			"key": "dieticianEmailId",
			"value": ""
		},
		{
			"key": "dieticianPassword",
			"value": ""
		},
		{
			"key": "PatientFilePathHyperThroid",
			"value": "",
			"type": "string"
		},
		{
			"key": "patientInfo",
			"value": ""
		},
		{
			"key": "patientToken",
			"value": ""
		},
		{
			"key": "patientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "vitals",
			"value": ""
		},
		{
			"key": "PatientFilePathDiabetic",
			"value": "",
			"type": "string"
		},
		{
			"key": "PatientFilePathCBC",
			"value": "",
			"type": "string"
		},
		{
			"key": "patient_id",
			"value": ""
		}
	]
}